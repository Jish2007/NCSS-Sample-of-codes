def create_grid(size):
  grid = ["."*size]*size
  return grid

def move_knight(grid, pos, turn):
  direction = [
    (2, 1), 
    (2, -1),
    (1, 2),
    (1, -2),
    (-1, 2),
    (-1, -2),
    (-2, 1),
    (-2, -1)
  ]
  new_positions = []
  for d in direction:
    y = pos[0]+d[0]
    x = pos[1]+d[1]
    if y >= len(grid) or x >= len(grid) or x < 0 or y < 0:
      pass
    else:
      add_pos(grid, (y, x), turn)
      new_positions.append((y,x))
  return new_positions
  

def add_pos(grid, pos, turn):
  if grid[pos[0]][pos[1]] == ".":
    s = grid[pos[0]]
    grid[pos[0]] = s[:pos[1]] + str(turn) + s[pos[1] + 1:]
    
def init():
  size = int(input("Size: "))
  moves = int(input("Moves: "))
  pos = input("Knight: ").split(",")
  pos = (int(pos[0]), int(pos[1]))
  grid = create_grid(size)
  add_pos(grid, pos, 0)
  positions = [pos]
  for i in range(1, moves+1):
    new_positions = []
    for new_pos in positions:
      if grid[new_pos[0]][new_pos[1]] == str(i-1):
        new_positions.extend(move_knight(grid, new_pos, i))
    positions = new_positions
  print("\n".join(" ".join(line) for line in grid))
  
if __name__ == "__main__":
  init()
